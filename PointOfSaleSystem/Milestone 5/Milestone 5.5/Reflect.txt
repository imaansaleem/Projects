This is the overview of how this project is working.
This is a basic implementation of a Point of Sale (POS) application in C++. 
The Application starts from the main(). Where first data file is read and then displayed on the console. Next, an instance of the PosApp class is created with the file name "posdata.csv" passed as an argument. The run method of this instance is then called, which runs the Point of Sale Application giving you the options to List, add remove, stock, save, buy
List function displays the list of items in the inventory.
AddItem function adds a new item to the inventory. It first prompts the user to input whether the item is perishable or non-perishable, creates a new object of the corresponding type using dynamic memory allocation, and then prompts the user to input the details of the item. If the input is valid(that is checked by << function overloaded in the Item class if input is invalid then Error Class will handle it and returns ErrorState), the item is added to the inventory and the function returns. If the input is not valid, the function displays an error message flushes the previous input and prompts the user to input the details again. Once the item is added to the inventory, the function displays a "DONE!" message to indicate that the item has been successfully added.
RemoveItem Function allows the user to remove an item from the list by selecting an item to delete using selectItem() function It displays the details of the selected item and deletes the object pointed to by Iptr[index]. Then, it shifts all the remaining items in the array to fill the gap left by the removed item. Finally, it decrements nptr, updates the action title, and displays a confirmation message.
Stock function allows the user to select an item from the inventory list and then adds stock to that item. It displays the item details in a POS_FORM format using the displayType() function. Then validated input for quantity is taken from the user. Finally, the function updates the quantity of the selected item
Save Function is responsible for saving the data of all the items in the inventory to a file. It first opens the output file. It loops through all the items in the inventory and calls the save member function of each item, which writes the item's data to the output file
POS() is used to simulate a point-of-sale system. It first lists the items in the inventory, prompts the user to select an item based on sku, and then asks for the quantity to be sold. It also manages to handle the situations where sku does not match any Item in this case it displays an error message “Item not found” and prompts the user to enter again until right sku is not entered. It also handles the situation when a particular item is out of stock. It then calls the search function to search the particular item from the inventory based on Sku. When item is found, it displays the item in POS_FORM and then updates the quantity of the selected item in the inventory and displays the total cost of the sale. POS() function keeps on working until the user presses enter without entering SKU and then the final bill is displayed to user that is defined in the Bill class